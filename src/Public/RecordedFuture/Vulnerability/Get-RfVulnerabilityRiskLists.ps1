using namespace System
using namespace System.Collections.Generic

Function Get-RfVulnerabilityRiskLists {
    <#
    .SYNOPSIS
        Retrieve the available RecordedFuture Vulnerability threat lists.
    .DESCRIPTION
        
    .PARAMETER Credential
        PSCredential containing an API Token in the Password field.

    .PARAMETER NamesOnly
        Returns only the Name value of the associated list.

        This object is returned as an array to support passing arrays via pipeline as a parameter.
    .PARAMETER DescriptionsOnly
        Returns only the Description value of the associated list.

        This object is returned as an array to support passing arrays via pipeline as a parameter.
    .INPUTS
        Switch -> NamesOnly
        Switch -> DescriptionsOnly
    .EXAMPLE
        PS C:\> Get-RfVulnerabilityRiskLists
        ---
        name             : linkedToCyberExploit
        count            : 27226
        criticalityLabel : Low
        description      : Linked to Historical Cyber Exploit
        criticality      : 1
        relatedEntities  : {}

        name             : recentRelatedNote
        count            : 281
        criticalityLabel : Low
        description      : Recently Referenced by Insikt Group
        criticality      : 1
        relatedEntities  : {}

        name             : nistCritical
        count            : 128
        criticalityLabel : Critical
        description      : NIST Severity: Critical
        criticality      : 4
        relatedEntities  : {}

        name             : recentPocUnverified
        count            : 30
        criticalityLabel : Medium
        description      : Recent Unverified Proof of Concept Available
        criticality      : 2
        relatedEntities  : {}

        name             : exploitDev
        count            : 416
        criticalityLabel : High
        description      : Observed Exploit/Tool Development in the Wild
        criticality      : 3
        relatedEntities  : {aHTyRv}

        name             : recentAnalystNote
        count            : 17
        criticalityLabel : High
        description      : Recently Reported by Insikt Group
        criticality      : 3
        relatedEntities  : {}

        name             : recentPocVerified
        count            : 0
        criticalityLabel : High
        description      : Recent Verified Proof of Concept Available
        criticality      : 3
        relatedEntities  : {}

        name             : historicMalwareActivity
        count            : 100
        criticalityLabel : High
        description      : Historically Exploited in the Wild by Malware
        criticality      : 3
        relatedEntities  : {aHTyRv}

        name             : linkedToRecentExploitKit
        count            : 5
        criticalityLabel : Medium
        description      : Recently Linked to Exploit Kit
        criticality      : 2
        relatedEntities  : {}

        name             : relatedNote
        count            : 12035
        criticalityLabel : Low
        description      : Historically Referenced by Insikt Group
        criticality      : 1
        relatedEntities  : {}

        name             : historicExploitDev
        count            : 39
        criticalityLabel : Medium
        description      : Historically Observed Exploit/Tool Development in the Wild
        criticality      : 2
        relatedEntities  : {aHTyRv}
    .NOTES
        RecordedFuture-API
    .LINK
        https://github.com/LogRhythm-Tools/LogRhythm.Tools
    #>

    [CmdletBinding()]
    Param(
        [Parameter(Mandatory = $false, Position = 0)]
        [ValidateNotNull()]
        [pscredential] $Credential = $LrtConfig.RecordedFuture.ApiKey,
        [switch] $NamesOnly,
        [switch] $DescriptionsOnly
    )

    Begin {
        $BaseUrl = $LrtConfig.RecordedFuture.BaseUrl
        $Token = $Credential.GetNetworkCredential().Password

        # Request Headers
        $Headers = [Dictionary[string,string]]::new()
        $Headers.Add("X-RFToken", $Token)

        Write-Verbose "$($Headers | Out-String)"

        # Request Setup
        $Method = $HttpMethod.Get

        # Check preference requirements for self-signed certificates and set enforcement for Tls1.2 
        Enable-TrustAllCertsPolicy
    }

    Process {
        # Establish Query Parameters object
        $QueryParams = [Dictionary[string,string]]::new()

        if ($QueryParams.Count -gt 0) {
            $QueryString = $QueryParams | ConvertTo-QueryString
            Write-Verbose "[$Me]: QueryString is [$QueryString]"
        }

        # Define Search URL
        $RequestUrl = $BaseUrl + "/v2/vulnerability/riskrules"
        Write-Verbose "[$Me]: Request URL: $RequestUrl"

        Try {
            $Results = Invoke-RestMethod $RequestUrl -Method $Method -Headers $Headers
        } catch {
            If ($_.Exception.Response.StatusCode.value__) {
                $HTTPCode = ($_.Exception.Response.StatusCode.value__ ).ToString().Trim()
                Write-Verbose "HTTP Code: $HTTPCode"
            }
            If  ($_.Exception.Message) {
                $ExceptionMessage = ($_.Exception.Message).ToString().Trim()
                Write-Verbose "Exception Message: $ExceptionMessage"
                return $ExceptionMessage
            }
        }

        # Return Values only as an array or all results as object
        if ($NamesOnly) {
            Return ,$Results.data.results.name
        } elseif ($DescriptionsOnly) {
            Return ,$Results.data.results.description
        } else {
            Return $Results.data.results
        }
    }
 

    End { }


}