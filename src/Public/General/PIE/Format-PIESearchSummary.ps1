using namespace System.Collections.Generic
<#
    .SYNOPSIS
        Takes the output object generated by Invoke-PIE and produces summary suitable for LogRhythm Case.
    .OUTPUTS
        String containing header summary for the e-mail submitted and evaluated.
    .EXAMPLE
        Format-PIECaseSummary -ReportEvidence $ReportEvidence
        ---
        === E-mail Header Summary ===
        --- Submitted E-mail ---
        Reported On: 11/29/2020 3:02:06 PM
        Reported By: passmossis@outlook.com
        Subject: PhishAlert: Mimecast Test

        --- Evaluated E-mail ---
        Email Parsed Format: eml
        Sent On: 11/18/2020 16:15:23                Received On: 11/18/2020 16:17:10
        Sender: ThreatDNA@optiv.com                 Sender Display Name: ThreatDNA
        Subject: ThreatDNA ThreatBEAT Advisory: November 18, 2020 - CostaRicto Hacker-for-Hire Group

        --- PIE Metadata ---
        PIE Version: 3.7         LogRhythm Tools Version: 1.1.0
        Evaluation ID: 5e0d83c3-5402-4c73-a624-4c3b96e986fd
        Start: 2020-11-30T22485194Z    Stop: 2020-11-30T22495865Z     Duration: 00:01:06.7063393
    .NOTES
        PIE      
    .LINK
        https://github.com/LogRhythm-Tools/LogRhythm.Tools
#>
function Format-PIESearchSummary {
    [CmdLetBinding()]
    param( 
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, Position = 0)]
        [object] $ReportEvidence
    )

    Begin {
        $SearchDetails = $($ReportEvidence.LogRhythmSearch.Details)
    }

    Process {
        $CaseOutput = [list[String]]::new()

        $CaseOutput.Add("=== MessageTrace Search Summary ===")
        if ($SearchDetails.SendAndSubject.Quantity -ge 1) {
            $CaseOutput.Add("--- Messages from Reported Sender with matching Subject ---")
            $CaseOutput.Add("Message Quantity: $($SearchDetails.SendAndSubject.Quantity)")
            $CaseOutput.Add("Sender: $($SearchDetails.SendAndSubject.Sender)")
            $CaseOutput.Add("Subject: $($SearchDetails.SendAndSubject.Subject)")
            $CaseOutput.Add("")
            $CaseOutput.Add("Recipients:")
            $CaseOutput.Add("$($SearchDetails.SendAndSubject.Recipients)")
            $CaseOutput.Add("")
            $CaseOutput.Add("")
        }
        if ($SearchDetails.Sender.Quantity -ge 1) {
            $CaseOutput.Add("--- Messages from Reported Sender with different Subjects ---")
            $CaseOutput.Add("Message Quantity: $($SearchDetails.Sender.Quantity)")
            $CaseOutput.Add("Sender: $($SearchDetails.Sender.Sender)")
            $CaseOutput.Add("")
            $CaseOutput.Add("Subject(s):")
            $CaseOutput.Add("$($SearchDetails.Sender.Subjects)")
            $CaseOutput.Add("")
            $CaseOutput.Add("Recipients:")
            $CaseOutput.Add("$($SearchDetails.Sender.Recipients)")
            $CaseOutput.Add("")
            $CaseOutput.Add("")
        }
        if ($SearchDetails.Subject.Quantity -ge 1) {
            $CaseOutput.Add("--- Messages from different Senders with matching Subject ---")
            $CaseOutput.Add("Message Quantity: $($SearchDetails.Subject.Quantity)")
            $CaseOutput.Add("Subject: $($SearchDetails.Subject.Subject)")
            $CaseOutput.Add("")
            $CaseOutput.Add("Sender(s):")
            $CaseOutput.Add("$($SearchDetails.Subject.Senders)")
            $CaseOutput.Add("")
            $CaseOutput.Add("Recipients:")
            $CaseOutput.Add("$($SearchDetails.Subject.Recipients)")
        }

        return $CaseOutput | Out-String
    }
}
