using namespace System.Collections.Generic
<#
    .SYNOPSIS
        Takes the output object generated by Invoke-PIE and produces a URL and Attachment evidence summary suitable for LogRhythm Case.
    .OUTPUTS
        String containing collected evidence summary and plugin status associated with that evidence.
    .EXAMPLE
        Format-PIEEvidenceSummary -EvaluationResults $EvaluationResults
        ---
        === E-mail Links & Attachments Summary ===
        --- Links Summary ---
        Number of URLs: 4        Rewritten URLs: 1        Shortened URLs: 0
        Unique Domains: 3


        -- Link 1 --
        Url: hxxp://www.optiv.com/
        Domain: www.optiv.com
        DNS IPv4: 199.83.132.46
        Rewritten: True
        Encoded URL: hxxps://protect-us.mimecast.com/s/0wSdCVON0gczLDq1tGaO_q/
        - Plugin Status -
        Shodan: True   UrlScan: True   VirusTotal: True


        -- Link 2 --
        Url: hxxps://www.optiv.com/security-solutions/security-services/threatdna-and-threatbeat
        Domain: www.optiv.com
        DNS IPv4: 199.83.132.46
        - Plugin Status -
        Shodan: True   UrlScan: True   VirusTotal: True


        -- Link 3 --
        Url: hxxps://www.twitter.com/optiv
        Domain: www.twitter.com
        DNS IPv4: 104.244.42.129
        - Plugin Status -
        Shodan: True   UrlScan: False   VirusTotal: True


        -- Link 4 --
        Url: hxxp://www.linkedin.com/company/optiv-inc
        Domain: www.linkedin.com
        DNS IPv4: 13.107.42.14
        DNS IPv6: 2620:1ec:21::14
        - Plugin Status -
        Shodan: True   UrlScan: False   VirusTotal: True


        --- Attachments Summary ---
        Number of Attachments: 1
        Attachment Extensions: pdf

        -- Attachment 1 --
        Filename: gTIC Advisory - Mercenary Hacker Group CostaRicto.pdf
        Extension: pdf
        Hash: 4EFBE8AC1F825D18CA81BDDB7FE033CDFE8B7059956E0AE5E5FE177B72E15782
        Hash Type: SHA256
        - Plugin Status -
        VirusTotal: True
    .NOTES
        PIE      
    .LINK
        https://github.com/LogRhythm-Tools/LogRhythm.Tools
#>
function Format-PIEEvidenceSummary {
    [CmdLetBinding()]
    param( 
        [Parameter(Mandatory = $true, ValueFromPipeline = $true, Position = 0)]
        [object] $EvaluationResults
    )

    Begin {
    }

    Process {
        $CaseOutput = [list[String]]::new()


        $CaseOutput.Add("=== E-mail Links & Attachments Summary ===")
        if ($EvaluationResults.Links.Details) {
            $CaseOutput.Add("--- Links Summary ---")
            $UrlsString1 = "Number of URLs: $($EvaluationResults.Links.Details | Where-Object -Property Scantarget -ne $null | Measure-Object | Select-Object -ExpandProperty Count)"
            $UrlsString2 = "Rewritten URLs: $($EvaluationResults.Links.Details | Where-Object -Property ReWrite -ne $false | Measure-Object | Select-Object -ExpandProperty Count)"
            $UrlsString3 = "Shortened URLs: $($EvaluationResults.Links.Details | Where-Object -Property Shortlink -ne $false | Measure-Object | Select-Object -ExpandProperty Count)"
            $CaseOutput.Add("$UrlsString1 $($UrlsString2.PadLeft(24-($UrlsString1.length)+$($UrlsString2.length))) $($UrlsString3.PadLeft(24-($UrlsString2.length)+$($UrlsString3.length)))")
            $CaseOutput.Add("Unique Domains: $($EvaluationResults.Links.Details.ScanTarget | Select-Object -Property Domain -Unique | Measure-Object | Select-Object -ExpandProperty Count)")
            $CaseOutput.Add("`r`n")
            $Urls = $EvaluationResults.Links.Details
            ForEach ($Url in $Urls) {
                $UrlCounter += 1 
                $CaseOutput.Add("-- Link $UrlCounter --")
                $CaseOutput.Add("Url: $($Url.ScanTarget.Defang)")
                $CaseOutput.Add("Domain: $($Url.ScanTarget.Domain)")
                if ($Url.ScanTarget.Dns.Status -eq $true) {
                    $IPv4DNS = ($Url.ScanTarget.DNS.IPv4) -join ", "
                    if ($IPv4DNS) {
                        $CaseOutput.Add("DNS IPv4: $IPv4DNS")
                    }
                    $IPv6DNS = ($Url.ScanTarget.DNS.IPv6) -join ", "
                    if ($IPv6DNS) {
                        $CaseOutput.Add("DNS IPv6: $IPv6DNS")
                    }
                }
                if ($Url.ReWrite) {
                    $CaseOutput.Add("Rewritten: $($Url.ReWrite.Status)")
                    $CaseOutput.Add("Encoded URL: $(($Url.ReWrite.Before | Select-Object -ExpandProperty AbsoluteUri).Replace('http','hxxp'))")
                }
                if ($Url.Shortlink) {
                    $CaseOutput.Add("Shortlink: $($Url.Shortlink.Status)")
                    $CaseOutput.Add("Shortlink URL: $($Url.Shortlink.Before.Replace('http','hxxp'))")  
                }
                # Populate Plugin Status
                if (($LrtConfig.Shodan.Apikey) -or ($LrtConfig.VirusTotal.Apikey) -or ($LrtConfig.UrlScan.Apikey)) {
                    $PluginSummary = "- Plugin Status -`r`n"
                    if ($LrtConfig.Shodan.Apikey) {
                        if ($Url.Plugins.Shodan) {
                            $PluginSummary += "Shodan: True   "
                        } else {
                            $PluginSummary += "Shodan: False   "
                        }
                    }
                    if ($LrtConfig.UrlScan.Apikey) {
                        if ($Url.Plugins.UrlScan) {
                            $PluginSummary += "UrlScan: True   "
                        } else {
                            $PluginSummary += "UrlScan: False   "
                        }
                    }
                    if ($LrtConfig.VirusTotal.Apikey) {
                        if ($Url.Plugins.VirusTotal) {
                            $PluginSummary += "VirusTotal: True   "
                        } else {
                            $PluginSummary += "VirusTotal: False   "
                        }
                    }

                    $CaseOutput.Add("$PluginSummary`r`n`r`n")
                }
            }
            if ($EvaluationResults.Attachments) {
                $CaseOutput.Add("--- Attachments Summary ---")
                $CaseOutput.Add("Number of Attachments: $($EvaluationResults.Attachments | Measure-Object | Select-Object -ExpandProperty Count)")
                $AttachmentTypes = $($EvaluationResults.Attachments | Select-Object -ExpandProperty Type -Unique) -join ", "
                $CaseOutput.Add("Attachment Extensions: $AttachmentTypes`r`n")

                $Attachments = $EvaluationResults.Attachments
                ForEach ($Attachment in $Attachments) {
                    $FileCounter += 1 
                    $CaseOutput.Add("-- Attachment $FileCounter --")
                    $CaseOutput.Add("Filename: $($Attachment.Name)")
                    $CaseOutput.Add("Extension: $($Attachment.Type)")
                    $CaseOutput.Add("Hash: $($Attachment.Hash.Hash)")
                    $CaseOutput.Add("Hash Type: $($Attachment.Hash.Algorithm)")
                    if (($LrtConfig.VirusTotal.Apikey)) {
                        $PluginSummary = "- Plugin Status -`r`n"
                        if ($Attachment.Plugins.VirusTotal) {
                            $PluginSummary += "VirusTotal: True   "
                        } else {
                            $PluginSummary += "VirusTotal: False   "
                        }
                        $CaseOutput.Add("$PluginSummary`r`n`r`n")
                    } else {
                        $CaseOutput.Add("")
                    }
                }
            }
        }

        return $CaseOutput | Out-String
    }
}
